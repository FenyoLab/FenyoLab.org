---
import Layout from "@layouts/Layout.astro";

import publications from "@data/publications.json";

interface Publication {
  authors: string;
  title: string;
  journal: string;
  link?: string;
  image?: string;
  "erratum-link"?: string;
  "erratum-journal"?: string;
  announcement?: string;
  "announcement-link"?: string;
}
---

<Layout title="Publications">
  <div class="flex h-full">
    <ul id="publications" class="list-none h-full overflow-y-scroll">
      {
        Object.entries(publications)
          .reverse()
          .map(([year, publications_list]) => (
            <>
              <li id={year} class="section">
                <div class="font-bold mb-4 text-base">{year}</div>
                <ul class="list-none space-y-8 mb-8">
                  {publications_list.map((publication: Publication) => (
                    <li>
                      <div class="flex gap-2 items-center">
                        {publication.image && (
                          <img width="50" src={publication.image} alt="alt" />
                        )}
                        <div class="text-sm">
                          {publication.authors}:
                          {publication?.link ? (
                            <a
                              href={publication.link}
                              target="_blank"
                              class="font-bold italic"
                            >
                              <Fragment
                                set:html={'"' + publication.title + '",'}
                              />
                            </a>
                          ) : (
                            <span class="font-bold italic">
                              "{publication.title}",
                            </span>
                          )}
                          <span>{publication.journal}.</span>
                          <div>
                            <>
                              {publication?.announcement && (
                                <a
                                  href={publication["announcement-link"]}
                                  target="_blank"
                                  class="font-bold italic"
                                >
                                  {publication.announcement}
                                </a>
                              )}
                            </>
                            {publication?.["erratum-journal"] && (
                              <>
                                <a
                                  href={publication["erratum-link"]}
                                  target="_blank"
                                  class="font-bold italic"
                                >
                                  Erratum
                                </a>
                                <span>
                                  {" "}
                                  in {publication["erratum-journal"]}.
                                </span>
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </li>
            </>
          ))
      }
    </ul>
    <ul class="flex-none hidden xl:block text-sm w-26 overflow-y-scroll pl-4">
      {
        Object.keys(publications)
          .reverse()
          .map((year) => (
            <li>
              {/* <a class="link hover:text-red-700" href={"#" + year}> */}
              <a class="link hover:text-red-700">{year}</a>
            </li>
          ))
      }
    </ul>
  </div>
</Layout>

<script>
  // Find all buttons with the `alert` class on the page.
  const publications = document.getElementById("publications");
  if (publications) {
    const sections = document.getElementsByClassName("section");
    const links = document.getElementsByClassName("link");

    links[0].classList.add("active");

    for (let i = 0; i < links.length; i++) {
      const link = links[i] as HTMLElement;
      link.addEventListener("click", () => {
        if (link.textContent) {
          const section = document.getElementById(link.textContent);
          section?.scrollIntoView({ behavior: "smooth" });
        }
      });
    }

    publications.addEventListener("scroll", () => {
      let current: string | null = "";

      for (let i = 0; i < sections.length; i++) {
        const section = sections[i] as HTMLElement;
        const sectionTop = section.getBoundingClientRect().bottom;
        if (sectionTop > 64) {
          current = section.getAttribute("id");
          break;
        }
      }

      for (let i = 0; i < links.length; i++) {
        const link = links[i] as HTMLElement;

        link.classList.remove("active");
        if (link.textContent === current) {
          link.classList.add("active");
          link.scrollIntoView({ behavior: "smooth" });
        }
      }
    });
  }
</script>

<style>
  .active {
    @apply underline decoration-red-700 decoration-2;
  }
</style>
