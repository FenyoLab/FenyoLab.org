---
interface SlideShowImage {
  default: ImageMetadata;
}
const images = await Astro.glob<SlideShowImage>(
  "public/images/slideshow/*.png"
);
function shuffleArray(array: SlideShowImage[]) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

shuffleArray(images);

// imports all files that end with `.md` in `./src/pages/post/`
---

<!-- class=" relative top-0 opacity-0  w-full h-full object-contain" --><!-- Renders an <article> for the first 5 blog posts -->
<div class="h-full">
  <slide-image class="block w-full h-full">
    <div class="w-full h-full overflow-hidden grid">
      {
        images.map((i) => (
          <img
            class="transition-opacity duration-1000 ease-in-out opacity-0  w-full h-full object-contain"
            style="grid-area: 1/1/2/2;"
            src={i.default.src}
          />
        ))
      }
    </div>

    <button>next!</button>
  </slide-image>
</div>

<script>
  class SlideImage extends HTMLElement {
    currentImage = 0;
    images: NodeListOf<HTMLImageElement> | undefined = undefined;
    constructor() {
      super();
      this.images = this.querySelectorAll("img");
      if (this.images.length == 0) return;
      this.nextImage();
    }

    nextImage() {
      const self = this;
      if (this.images == undefined) return;
      this.images[this.currentImage].classList.add("opacity-0");
      this.currentImage = (this.currentImage + 1) % 3;
      this.images[this.currentImage].classList.remove("opacity-0");
      setTimeout(() => self.nextImage(), 10000);
    }
  }

  customElements.define("slide-image", SlideImage);
</script>
